https://docs.mongodb.com/manual/core/data-model-design/
https://docs.mongodb.com/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/

. Criar um novo banco de dados chamado sexta

. Criar coleção de postits (postits)

. Criar coleção de usuários (users)

-- dica
criar coleção mongodb
create collection mongodb

-- referência
https://docs.mongodb.com/manual/reference/method/db.createCollection/

-- solução
Colocar o banco de dados em uso.
db.createCollection('users')
db.createCollection('postits')

==============================================

. Inserir 2 novos registros de postits
title : Titulo A
description : Descricao A

title : Titulo B
description : Descricao B

-- dica
inserir dados mongodb

-- referência
https://docs.mongodb.com/manual/reference/method/db.collection.insert/

-- solução
db.postits.insert(
    { 'title' : 'Titulo A', 'description' : 'Descricao A' }
)

db.postits.insert(
    { 'title' : 'Titulo B', 'description' : 'Descricao B' }
)

db.postits.find().pretty()

==============================================

. Inserir 2 novos registros de usuários.
email : admin@email.com
password : 123456

email : comum@email.com
password : 123456

-- solução
db.users.insertMany([
    { "email" : "admin@email.com", "password" : "123456" }
    , { 'email' : "comum@email.com", "password" : "123456" }
])

==============================================

. Selecione o último documento inserido

-- dica
ordenação mongodb

-- solução
db.users.find().sort({ _id : 1 }).limit(1).pretty()

==============================================

. Atualize o registro aonde o email seja 'admin@email.com' para que o nome dele seja igual a "Administrador"

-- dica
inserir campo mongodb

-- solução
db.users.update({ "email" : "admin@email.com" }, { $set : { "name" : "Administrador" }})

==============================================

. Atualize o registro aonde o email seja 'comum@email.com' para que possa receber uma lista de postits

-- dica
data type mongodb
inserir campo mongodb

-- solução
db.users.update({ "email" : "comum@email.com" }, { $set : { "postits" : [] } })

. Selecione todos os registros para verificar as informações inseridas

==============================================

. Exclua somente o campo aonde inserimos o postits, para validarmos o próximo exercício

-- dica
excluir campo mongodb

-- solução
db.users.update({ "email" : "comum@email.com" }, { $unset: { postits : [] } })

. Selecione todos os registros para verificar as informações removidas


==============================================

. Atualize todos os registros para que elas recebam também a lista de postits

db.users.update({} , { $set : { "postits" : [] }}, { upsert: false, multi: true })

==============================================

. Atualize a lista de postits para que o usuário Admin tenha o postits com Título A, 
e para o comum, com o Título B

-- Lembrete
Buscar o id de um postit e incluir um item para o usuário

ObjectId("5c014c9167392bde6e3c7b5e") - admin
ObjectId("5c014c9667392bde6e3c7b5f") - comum

db.users.update({
    "email" : "admin@email.com"
    },
    {
        $push : { postits: ObjectId("5c014c9167392bde6e3c7b5e") }
    }
)

db.users.update({
    "email" : "comum@email.com"
    },
    {
        $push : { postits: ObjectId("5c014c9667392bde6e3c7b5f") }
    }
)

==============================================

. Traga todos os usuários e seus respectivos postits

-- referência
https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/

-- solução
db.users.aggregate({
    $lookup : {
        from: "postits",
        localField: "postits",
        foreignField: "_id",
        as: "users_postits"
    }
}).pretty()

db.users.aggregate(
    {
        $lookup : {
            from: "postits",
            localField: "postits",
            foreignField: "_id",
            as: "usuarios_todo"
        }
    },
    {
        $project : {
            "postits" : 0
        }
    }
).pretty()

==============================================

. Remova o postit de Título B do usuário comum@email.com

db.users.update(
  { "email": "comum@email.com" },
  { $pull: { 'postits': ObjectId("5c014c9667392bde6e3c7b5f") } }
)

==============================================

. Atualize o usuário Administrador para que ele tenha dois endereços

-- embedded documents

Adicionar 2 novos endereços
db.users.update({ "email" : "admin@email.com" }, { $set: { "addresses" : [] } })

db.users.update(
    { "email" : "admin@email.com" },
    {
        $push : { addresses : { "local" : "Alameda Barão de Limeira", "state" : "SP" } }
    }
)

db.users.update(
    { "email" : "admin@email.com" },
    {
        $push : { addresses : { "local" : "Av. Paulista", "state" : "RJ" } }
    }
)

==============================================

. Traga somente os usuários cujo endereço tenha como estado, o estado de SP.

db.users.find({ "addresses.state" : "SP" }).pretty()